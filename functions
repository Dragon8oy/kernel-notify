checkDpkg() {
  i=0
  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
    case $(($i % 4)) in
      0 ) j="-" ;;
      1 ) j="\\" ;;
      2 ) j="|" ;;
      3 ) j="/" ;;
    esac
    echo -en "\r[$j] Waiting for other software managers to finish... "
    sleep 1
    ((i=i+1))
  done
  echo -en "Done\n"
}

uninstall() {
  if [[ "$USER" != "root" ]]; then
    echo "  ATTENTION: Insufficient permission, please rerun with root"
  elif [[ "$(pwd)" == "$workDir" ]]; then
    cd /tmp/
    uninstall
  elif [[ "$workDir" == "" ]]; then
    workDir=$(pwd)
    uninstall
  else
    read -r -p "Are you sure you want to uninstall? [y/N] " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      echo "Uninstalling:"
      if dpkg -s kernel-notify | grep Status |grep -q installed; then
        echo "Kernel-notify installed via .deb, removing"
        checkDpkg
        dpkg -r kernel-notify
        exit
      else
        uninstallList=$(cat "$workDir/uninstall-list")
        for filename in $uninstallList; do
          if [ -f "$filename" ] || [ -d "$filename" ]; then
            rm -rfv "$filename"
          fi
        done
        echo "Done"; exit
      fi
    fi
  fi
}

displayGraphics() {
  #Get display and user information
  if [[ "$DISPLAY" != "" ]]; then
    display="$DISPLAY"
    user="$USER"
  elif [[ -f "/tmp/kernel-notify.displayinfo" ]]; then
    declare $(cat /tmp/kernel-notify.displayinfo |grep "display.*") #Declare display
    declare $(cat /tmp/kernel-notify.displayinfo |grep -v "display.*") #Declare user
  else
    #No display available
    return 1
  fi

  for i in "$@"; do
    #Check if zenity is installed
    if [[ "$i" == "zenity" ]]; then
      if ! which zenity > /dev/null 2>&1; then
        echo "Zenity not installed, it is required for graphical menus"
        return 1
      fi
    fi
    #Run command on correct display with correct user
    if [[ "$i" == "launch" ]]; then
      sudo -u $user DISPLAY=$display DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u $user)/bus bash -c "$1"
    fi
  done
}

latestVersionCache=""
getLatestKernelVersion() {
  if [[ "$latestVersionCache" == "" ]]; then
    latestVersion=$(echo $(curl -k https://www.kernel.org -s) | tr -d '\n' | awk -F'<td id="latest_button">' '{print $2}' | cut -c -70 | tr -d '\n' | awk -F'/' '{print $8}' | cut -c -70 | sed 's/linux-//g' | sed 's/.t.*//g')
    if [ "$latestVersion" == "" ]; then
      latestVersion="x.x.x"
      if [[ "$1" == "silent" ]]; then
        sleep 0.5; echo -ne "\rChecking latest version... Error\n"; sleep 0.5
        sendNotification "Network error" "An error occured while checking latest version"
        if [ "$1" == "-a" ] || [ "$1" == "--add-kernel" ] || [ "$1" == "-aa" ]; then
          echo "Likely a network issue, action cancelled"
          exit
        fi
      fi
    fi
    echo "$latestVersion"
    latestVersionCache="$latestVersion"
  else
    echo "$latestVersionCache"
  fi
}
