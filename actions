#!/bin/bash
latestVersionFull=$2
latestVersion=${latestVersionFull//.}
currVersion=$(uname -r | sed 's/-.*/ /g')

echo $3
if [ "$3" != "" ]; then
  latestVersionFull=$3
  latestVersion=${latestVersionFull//.}
fi

installKernel() {
  if [ "$automatic" -ne "1" ]; then
    echo "Enter a kernel version to install, leave blank to use selected kernel ($latestVersionFull):"
    read installVersion
  fi

  if [[ "$installVersion" == "" ]]; then
    echo "Using latest version..."
    if [[ "$latestVersionFull" != "x.x.x" ]]; then
      if [ "$latestVersion" -eq "${currVersion//.}" ]; then
        echo "Kernel is already on the latest version"
        exit
      fi
    else
      exit
    fi
    installVersion=$latestVersionFull
  else
    echo "Finding kernel version $installVersion..."
    latestVersionFull=$installVersion
    latestVersion=${latestVersionFull//.}
  fi

  installVersionLink=$installVersion
  if [ "$latestVersion" -le "99" ]; then
    installVersion=$(echo "$installVersion"".0")
  fi

  if [ "${installVersion%%.*}" -lt "10" ]; then
    installVersionShort="0${installVersion%%.*}"
  else
    installVersionShort="${installVersion%%.*}"
  fi
  installVersionTemp="${installVersion%.*}"
  installVersionTemp="${installVersionTemp##*.}"
  if [ "$installVersionTemp" -lt "10" ]; then
    installVersionShort="$installVersionShort""0$installVersionTemp"
  else
    installVersionShort="$installVersionShort$installVersionTemp"
  fi
  if [ "${installVersion##*.}" -lt "10" ]; then
    installVersionShort="$installVersionShort""0${installVersion##*.}"
  else
    installVersionShort="$installVersionShort${installVersion##*.}"
  fi

  archiveContent=$(curl -k -s https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/)
  kernelDate=$(echo $archiveContent |awk -F"linux-headers-$installVersion-$installVersionShort\\\\_$installVersion-$installVersionShort." '{print $2}' |cut -c -12)

  if [ "$kernelDate" == "" ]; then
    echo "Either that kernel doesn't have an entry, or you have no internet connection"
    exit
  fi

  echo "Downloading kernel version $installVersion..." && echo ""
  if [ ! -d "/tmp/kernel-notify" ]; then
    mkdir /tmp/kernel-notify
  fi
  cd /tmp/kernel-notify

  declare -a packages=("https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/linux-headers-$installVersion-$installVersionShort""_$installVersion-$installVersionShort.$kernelDate""_all.deb" "https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/linux-headers-$installVersion-$installVersionShort-generic_$installVersion-$installVersionShort.$kernelDate""_$(dpkg --print-architecture).deb" "https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/linux-image-unsigned-$installVersion-$installVersionShort-generic_$installVersion-$installVersionShort.$kernelDate""_$(dpkg --print-architecture).deb" "https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/linux-modules-$installVersion-$installVersionShort-generic_$installVersion-$installVersionShort.$kernelDate""_$(dpkg --print-architecture).deb")

  for filename in "${packages[@]}"; do
    curl -O $filename
    filename="${filename##*/}"
    installList="$installList $filename"
    if ! file $filename | grep -q 'Debian binary package'; then
      echo "$filename: Not a Debian package"
      clearFiles "$installList"
      exit
    fi
  done

  curl -O "https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/CHECKSUMS"
  if ! shasum --ignore-missing -c CHECKSUMS; then
    echo "Downloaded kernel checksum invalid"
    clearFiles "$installList CHECKSUMS"
  fi

  echo ""; echo "All packages verified, installing kernel version $installVersion..."
  checkDpkg
  sudo dpkg -i $installList && echo "Done, reboot for the update to take effect"
  clearFiles "$installList CHECKSUMS"
}

removeKernel() {
  echo "Currently installed kernels:"
  KERNELS=$(ls /boot/ | grep vmlinuz)
  KERNELS=${KERNELS//vmlinuz-}
  KERNELS=${KERNELS//-generic}
  KERNELS=${KERNELS// /\n}
  printf "$KERNELS\n" |cat -n
  echo "Please enter the kernels or numbers you want to remove: (x.x.x-xx): "
  read DELVERSION
  DELVERSION=${DELVERSION//,/ }
  read -ra ARR <<< $DELVERSION
  for i in "${ARR[@]}"; do
    if [ $(expr length "$i") == 1 ] || [ $(expr length "$i") == 2 ]; then
      i=$(printf "$KERNELS\n" | awk "NR==$i{ print; }")
    fi
    REMOVESTR="$REMOVESTR linux-headers-$i-generic linux-headers-$i linux-image-unsigned-$i-generic linux-modules-$i-generic"
  done
  if [ -f "/usr/bin/dpkg" ]; then
    read -r -p "Are you sure? [y/N] " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
      checkDpkg
      sudo dpkg -r $REMOVESTR
    fi
  fi
}

listKernels() {
  echo "Currently installed kernels:"
  KERNELS=$(ls /boot/ | grep vmlinuz)
  KERNELS=${KERNELS//vmlinuz-}
  KERNELS=${KERNELS//-generic}
  KERNELS=${KERNELS// /\n}
  printf "$KERNELS\n" |cat -n
}

clearFiles() {
  cd /tmp/kernel-notify
  rm $1
  if ! ls /tmp/kernel-notify |grep -q ".*"; then
    rm -rf /tmp/kernel-notify
  else
    echo "/tmp/kernel-notify not removed as it is in use"
  fi
}

checkDpkg() {
  i=0
  tput sc
  echo "Checking dpkg lock..."
  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
    case $(($i % 4)) in
      0 ) j="-" ;;
      1 ) j="\\" ;;
      2 ) j="|" ;;
      3 ) j="/" ;;
    esac
    tput rc
    echo -en "\r[$j] Waiting for other software managers to finish... "
    sleep 1
    ((i=i+1))
  done
  echo "Done"
}

if [[ "$2" == "" ]]; then
  latestVersionFull="x.x.x"
fi

if [ "$1" != "-l" ] || [ "$1" != "--list" ]; then
  if [ ! -f "/usr/bin/dpkg" ]; then
    echo "Kernel installation / removal is not supported on this system"
    exit
  fi
fi

if [ "$3" == "-a" ]; then
  automatic="1"
else
  automatic="0"
fi

case $1 in
    -r|--remove) removeKernel; exit;;
    -l|--list) listKernels; exit;;
    -i|--install) installKernel;;
    *) echo "Use -i, -r or -l"; exit 1;;
esac;
