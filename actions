#!/bin/bash

installKernel() {
  if ls /etc/*-release > /dev/null 2>&1; then
    if cat /etc/*-release |grep -q Raspbian 2>&1 ; then
      echo "Raspbian / Raspberry Pis are not supported with this feature"
      exit 6
    fi
  else
    exit 6
  fi
  if [ "$automatic" -ne "1" ]; then
    echo "Enter a kernel version to install, leave blank to use selected kernel ($installVersion):"
    read chosenVersion
  fi

  if [[ "$chosenVersion" == "" ]]; then
    echo "Using selected version..."
    chosenVersion=$installVersion
    if [[ "$installVersion" != "x.x.x" ]]; then
      if [ "${installVersion//.}" -eq "${currVersion//.}" ]; then
        echo "Kernel is already on the selected version"
        exit 3
      fi
    else
      exit 7
    fi
  else
    echo "Finding kernel version $installVersion..."
  fi

  installVersion="$chosenVersion"
  archiveContent=$(curl -k -s https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersion/)
  installVersionLink=$installVersion
  if [ "${installVersion//.}" -le "99" ]; then
    installVersion=$(echo "${installVersion}.0")
  fi

  if [ "${installVersion%%.*}" -lt "10" ]; then
    installVersionShort="0${installVersion%%.*}"
  else
    installVersionShort="${installVersion%%.*}"
  fi
  installVersionTemp="${installVersion%.*}"
  installVersionTemp="${installVersionTemp##*.}"
  if [ "$installVersionTemp" -lt "10" ]; then
    installVersionShort="${installVersionShort}0$installVersionTemp"
  else
    installVersionShort="$installVersionShort$installVersionTemp"
  fi
  if [ "${installVersion##*.}" -lt "10" ]; then
    installVersionShort="${installVersionShort}0${installVersion##*.}"
  else
    installVersionShort="$installVersionShort${installVersion##*.}"
  fi

  kernelDate=$(echo $archiveContent |awk -F"linux-headers-$installVersion-${installVersionShort}_$installVersion-$installVersionShort." '{print $2}' |cut -c -12)

  if [ "$kernelDate" == "" ]; then
    echo "Either that kernel doesn't have an entry, or you have no internet connection"
    exit 2
  fi

  declare -a packages=("https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/linux-headers-$installVersion-${installVersionShort}_$installVersion-$installVersionShort.${kernelDate}_all.deb" "https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/linux-headers-$installVersion-$installVersionShort-generic_$installVersion-$installVersionShort.${kernelDate}_$(dpkg --print-architecture).deb" "https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/linux-modules-$installVersion-$installVersionShort-generic_$installVersion-$installVersionShort.${kernelDate}_$(dpkg --print-architecture).deb" "https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/linux-image-unsigned-$installVersion-$installVersionShort-generic_$installVersion-$installVersionShort.${kernelDate}_$(dpkg --print-architecture).deb")

  dpkgKernelInstall() {
    echo "Downloading kernel version $installVersion..." 1>&2 && echo "" 1>&2
    if [ ! -d "/tmp/kernel-notify" ]; then
      mkdir /tmp/kernel-notify
    elif [ ! -w /tmp/kernel-notify ]; then
      echo "No permission to use /tmp/kernel-notify, please delete it and try again or run with root" 1>&2
      exit 7
    fi
    cd /tmp/kernel-notify

    for filename in "${packages[@]}"; do
      let progress=$progress+20
      echo "# Downloading ${filename##*/}..."
      curl --progress-bar -O $filename
      echo "$progress"
      filename="${filename##*/}"
      installList="$installList $filename"
      if ! file $filename | grep -q 'Debian binary package'; then
        echo "$filename: Not a Debian package" 1>&2
        clearFiles "$installList"
        exit 4
      fi
    done

    echo "# Downloading & verifying checksums..."
    curl --progress-bar -O "https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersionLink/CHECKSUMS"
    echo "90"
    if ! sha256sum --ignore-missing -c CHECKSUMS 1>&2; then
      echo "Downloaded kernel checksum invalid" 1>&2
      clearFiles "$installList CHECKSUMS"
    fi
    echo "99"

    echo "" 1>&2; echo "All packages verified, installing kernel version $installVersion..." 1>&2
    checkDpkg 1>&2

    progress=0
    echo "$progress"
    read -ra installArray <<< $installList
    for filename in "${installArray[@]}"; do
      let progress=$progress+25
      echo "# Installing ${filename##*/}..."
      sudo dpkg -i $filename 1>&2
      echo "$progress"
    done
    echo "# Installed Kernel v$installVersion"
    echo "Done, reboot for the update to take effect" 1>&2
    clearFiles "$installList CHECKSUMS"
  }

  if ! displayGraphics "zenity"; then
    dpkgKernelInstall
  else
    dpkgKernelInstall | displayGraphics 'zenity --progress --auto-close --window-icon="/usr/share/icons/hicolor/64x64/apps/kernel-notify-app.png" --title="Kernel Updater" --text="Starting update..." --width=400 --height=100 --percentage=0' "launch" "zenity"
  fi

  if [ "$?" == "1" ]; then
    echo "Cancelled"
    for filename in "${packages[@]}"; do
      filename="${filename##*/}"
      installList="$installList $filename"
    done
    clearFiles "$installList CHECKSUMS"
    sudo dpkg -r linux-headers-$installVersion-$installVersionShort linux-headers-$installVersion-$installVersionShort-generic linux-modules-$installVersion-$installVersionShort-generic linux-image-unsigned-$installVersion-$installVersionShort-generic
    exit 5
  fi
}

removeKernel() {
  args="$@"
  args=$(echo "$args" | sed 's/\(-t\s*\|--test\s*\|-r\s*\|--remove\)//g')
  if [[ "$(echo "$args")" != "" ]] && [[ "$args" != *"-t"* ]] && [[ "$args" != *"-r"* ]]; then
    DELVERSION="$args"
    listKernels "silent"
  else
    listKernels
    if [ "$?" == "1" ]; then
      exit
    fi
    echo "Please enter the kernels or numbers you want to remove: (x.x.x-xXxXxX): "
    read DELVERSION
  fi
  DELVERSION=${DELVERSION//,/ }
  read -ra ARR <<< $DELVERSION
  if [[ "${ARR[@]}" == "0" ]] || [[ "${ARR[@]}" == "" ]]; then
      echo "Either no kernel was entered, or an error occured"
      exit
  fi
  for i in "${ARR[@]}"; do
    if [ $(expr length "$i") == 1 ] || [ $(expr length "$i") == 2 ]; then
      i=$(printf "$KERNELS\n" | awk "NR==$i{ print; }")
    fi
    if [[ ! $(expr length "$i") -eq 12 ]] && [[ ! $(expr length "$i") -eq 13 ]] && [[ ! $(expr length "$i") -eq 14 ]]; then
      echo "'$i' is not in the correct format"
      exit
    fi
    if [ "$i" == $(uname -r | sed 's/-generic/ /g') ]; then
      echo "Removing the booted kernel is not allowed"
      exit
    fi
    DELSTR="$DELSTR $i"
    REMOVESTR="$REMOVESTR linux-headers-$i linux-headers-$i-generic linux-modules-$i-generic linux-image-unsigned-$i-generic"
  done
  read -r -p "Are you sure you want to remove kernel(s):$DELSTR? [y/N] " response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    checkDpkg
    sudo dpkg -P $REMOVESTR
    cd /usr/src/ && du -hks * |sort -n |awk '$1 <6000 {print $2}' |grep 'linux' |xargs -I F sudo rm -rvf F
    cd /lib/modules && du -hks * |sort -n |awk '$1 <6000 {print $2}' |grep 'linux' |xargs -I F sudo rm -rvf F
  fi
}

listKernels() {
  if ls /etc/*-release > /dev/null 2>&1; then
    if cat /etc/*-release |grep -q Raspbian 2>&1 ; then
      echo "Raspbian / Raspberry Pis are not supported with this feature"
      return 1
    fi
  else
    return 1
  fi
  if [ ! -d "/boot" ]; then
    return 1
  fi
  KERNELS=$(ls /boot/ | grep vmlinuz)
  KERNELS=${KERNELS//vmlinuz-}
  KERNELS=${KERNELS//-generic}
  KERNELS=$(echo "$KERNELS" |grep -vi "vmlinuz")
  KERNELS=${KERNELS// /\n}
  KERNELS=$(echo "$KERNELS" |grep .)
  if [ "$KERNELS" = "" ]; then
    KERNELS="Error while looking for kernels"
  fi
  if [ "$1" != "silent" ]; then
    echo "Currently installed kernels:"
    printf "$KERNELS\n" |cat -n
    echo "Config set to keep $maxkernelcount kernels before notifying users"
  fi
}

clearFiles() {
  cd /tmp/kernel-notify
  read -ra ARR <<< $@
  for i in "${ARR[@]}"; do
    if [ -f "$i" ]; then
      rm $i
    else
      echo "File $i doesn't exist, not deleting"
    fi
  done
  if ! ls /tmp/kernel-notify |grep -q ".*"; then
    if [ ! -w /tmp/kernel-notify ]; then
      echo "Insufficient permission to remove /tmp/kernel-notify"
    fi
    rm -rf /tmp/kernel-notify
  fi
  cd ../
}

mkDisplayInfo() {
  echo "display=$DISPLAY" > /tmp/kernel-notify.displayinfo
  echo "user=$USER" >> /tmp/kernel-notify.displayinfo
}

if [[ -d "$workDir" ]] && [[ -f "$workDir/config" ]] && [[ -f "$workDir/functions" ]]; then
  source "$workDir/config"
  source "$workDir/functions"
  cd "$workDir"
else
  echo "Config file / kernel-notify directory missing, exiting"
  echo "If you are running kernel-notify without installing, use '--test' or '-t'"
  exit 1
fi


if [ "$1" != "-l" ] && [ "$1" != "--list" ]; then
  if [ ! -f "/usr/bin/dpkg" ]; then
    echo "Kernel installation / removal is not supported on this system"
    exit 6
  fi
fi

if [ "$1" == "-i" ] && [ "$2" != "" ]; then
  installVersion=$2
  latestVersion=${latestVersionFull//.}
  currVersion=$(uname -r | sed 's/-.*/ /g')
  automatic="1"
elif [[ "$1" == "-i" ]]; then
  installVersion=$(getLatestKernelVersion)
  currVersion=$(uname -r | sed 's/-.*/ /g')
fi

if [ "$4" == "-a" ]; then
  automatic="1"
elif [ "$automatic" == "" ]; then
  automatic="0"
fi

read -ra args <<< $@
case $1 in
    -r|--remove) removeKernel "${args[@]:1}"; exit;;
    -l|--list) listKernels; exit 0;;
    -i|--install) installKernel; exit 0;;
    -d|--display) mkDisplayInfo; exit 0;;
    *) echo "Use -i, -r or -l"; exit 7;;
esac;
