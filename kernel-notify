#!/bin/bash
export workDir="/usr/share/kernel-notify"
icon="kernel-notify"
version="6.0.3"

if [[ "$@" == *"-t"* ]]; then
  export workDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
  echo "Running kernel-notify in $workDir/"
  test="1"
fi

if [[ -d "$workDir" ]] && [[ -f "$workDir/config" ]] && [[ -f "$workDir/functions" ]]; then
  source "$workDir/config"
  source "$workDir/functions"
  cd "$workDir"
else
  echo "Config file / kernel-notify directory missing, exiting"
  echo "If you are running kernel-notify without installing, use '--test' or '-t'"
  exit 1
fi

if [ "$test" == "" ] && [ ! -d /etc/xdg/autostart/ ] && [ "$warnautostart" == "1" ]; then
    echo "Autostart directory not found, program will not automatically start"
fi

editConfig() {
  if [ "$2" == "" ]; then
    echo "Config:" && echo ""
    cat "$workDir/config"
  else
    if [ "$3" == "" ]; then
      echo "Config:" && echo ""
      cat "$workDir/config" | grep $2
    else
      sudo sed 's|.*'$2'.*|'$2'='\"$3\"'|' "$workDir/config" > /tmp/kernel-config.temp
      sudo mv /tmp/kernel-config.temp "$workDir/config"
      echo "Saved new config"
    fi
  fi
}

listConfig() {
  if [ -f "$workDir/config.old" ]; then
    if ! cmp --silent "$workDir/config" "$workDir/config.old"; then
      echo "Config file has changed"
      echo "Apply old values to new config with 'kernel-notify -c CFGNAME CFGVALUE'"; echo ""
      echo "Old values:"
      cat "$workDir/config.old"; echo ""; echo ""
      echo "New values:"
      cat "$workDir/config"; echo ""; echo ""
    else
      echo "No change in config found"
    fi
  else
    echo "No old config file found"
  fi
}

checkKernelCount() {
  if [ "$1" != "silent" ] && [ "$1" != "alert" ]; then
    if cat /etc/*-release |grep -q Raspbian 2>&1 ; then
      return 1
    fi
  fi
  if [ ! -d "/boot" ]; then
    return
  fi
  KERNELS=$(ls /boot/ | grep vmlinuz)
  KERNELS=${KERNELS//vmlinuz-}
  KERNELS=${KERNELS//-generic}
  KERNELS=$(echo "$KERNELS" |grep -vi "vmlinuz")
  KERNELS=${KERNELS// /\n}
  KERNELS=$(echo "$KERNELS" |grep .)
  read -ra ARR <<< $(echo $KERNELS |grep .)
  if [ "$1" != "silent" ]; then
    if [ "${#ARR[@]}" -gt "$maxkernelcount" ]; then
      sendNotification "Configured kernel install count reached" "Remove extra kernels with 'kernel-notify -r'" ""
      echo "Remove kernels to avoid this message, or raise the limit in the config"
    fi
  fi
}

automaticFeatures() {
  case $1 in
    am) mute; sendNotification "Program muted" "Run 'kernel-notify -um' to unmute";;
    aa) updateKernel "automatic" "";;
    au) updateProgram "$version" "automatic";;
  esac

  if [[ -f "/tmp/kernel-notify.displayinfo" ]]; then
    rm /tmp/kernel-notify.displayinfo
  fi
}

zenityNotify() {
  latestVersion=$(getLatestKernelVersion)
  currVersion=$(uname -r | sed 's/-.*/ /g')
  latestProgVer=$(curl -k -s https://api.github.com/repos/dragon8oy/kernel-notify/releases/latest | grep "tag_name" | cut -d v -f 2,3 | tr -d \",)
  latestVersionFull=$latestVersion
  latestVersion=$(echo "${latestVersion//.}")
  checkKernelCount "silent"
  if [ "$latestVersion" != "xxx" ] || [ "$latestProgVer" != "" ]; then
    if [ "$KERNELS" != "" ] && [ "$latestVersion" -ne "${currVersion//.}" ] && echo "$KERNELS" |grep "$latestVersionFull" > /dev/null 2>&1; then
      echo "Latest kernel version installed, reboot to take effect"
      kernelOutdated="0"
    elif [ "$latestVersion" -ne "${currVersion//.}" ]; then
      echo "Latest kernel not installed"
      kernelOutdated="1"
    else
      echo "Latest kernel version installed"
      kernelOutdated="0"
    fi
    if [ "${latestProgVer//.}" -ne "${version//.}" ]; then
      echo "Program outdated"
      progOutdated="1"
    else
      echo "Program up-to-date"
      progOutdated="0"
    fi
  else
    progOutdated="0"
    kernelOutdated="0"
    sendNotification "Network error" "An error occured while checking latest version"
  fi
  if [ "$progOutdated" == "0" ] && [ "$kernelOutdated" == "0" ]; then
    displayGraphics 'zenity --info --window-icon=/usr/share/icons/hicolor/64x64/apps/kernel-notify-app.png --icon-name=kernel-notify-app --title="Kernel Updater" --text="No updates available" --width=200 --height=50' "launch" "zenity"
    if [ "$?" != "0" ]; then
      sendNotification "Zenity issue detected" "An error occured while running zenity"
    fi
    exit
  fi
  latestVersion="$latestVersionFull"
}

mute() {
  echo "Muting kernel-notify:"
  editConfig "-c" "muted" "1"
  echo "Done";
}

unmute() {
  echo "Unmuting kernel-notify:"
  editConfig "-c" "muted" "0"
  echo "Done";
}

updateProgram() {
  if bash -e "$workDir/updater" "$version"; then
    #Program updated fine
    if [[ "$2" == "automatic" ]]; then
      sendNotification "Program updated" "Run 'kernel-notify -v' to check version"
    fi
  elif [[ "$?" == "1" ]]; then
    #Program has no updates available
    return
  else
    #Program failed to update
    echo "  ATTENTION: Updating kernel-notify failed"
    if [[ "$2" == "automatic" ]]; then
      sendNotification "Program update failed" "Kernel-notify failed to update - run 'kernel-notify -u'"
    fi
  fi
}

updateKernel() {
  latestVersionFull=$(getLatestKernelVersion)
  if [[ "$latestVersionFull" == "x.x.x" ]]; then
    sendNotification "Network error" "An error occured while checking latest version"
    echo "Likely a network issue, installation cancelled"
    exit
  fi
  if [[ "$2" == *"-t"* ]]; then
    installVersion=""
  else
    installVersion="$2"
  fi
  if [[ "$1" == "automatic" ]]; then
    "$workDir/actions" -i "$latestVersionFull" -a
    case "$?" in
      #Kernel install successful
      0) sendNotification "Kernel updated" "Run 'kernel-notify -r' to remove old kernels";;
      #Kernel install failed - missing resources
      1) sendNotification "Kernel failed to update" "Shared functions could not be found";;
      #Kernel install failed - no kernel to download / network error
      2) sendNotification "Kernel failed to update" "No kernel to download / network error";;
      #Kernel install failed - already updated
      3) sendNotification "Kernel failed to update" "Installed kernel is already the latest version";;
      #Kernel install failed - broken packages
      4) sendNotification "Kernel failed to update" "Downloaded kernel faulty";;
      #Kernel install failed - user cancelled
      5) sendNotification "Kernel failed to update" "Cancelled by user";;
      #Kernel install failed - unsupported
      6) sendNotification "Kernel failed to update" "Updating the kernel is unsupported on this system";;
      #Kernel install failed - unknown error
      7|*) sendNotification "Kernel failed to update" "Kernel failed to update for an unknown reason";;
    esac
  else
    bash -e "$workDir/actions" -i "$installVersion"
  fi
  checkKernelCount
}

sendNotification() {
  #Silence notification if program is muted
  if [ "$muted" == "1" ] && [ "$4" == "mute" ]; then
    echo "$1, $2"
  else
    #Decide whether or not to set configured priority
    if [ "$3" == "kernel" ] || [ "$3" == "program" ] || [ "$4" == "mute" ]; then
      displayPriority="$priority"
    fi
    #Check notifications code exists before running
    if [[ -f "$workDir/notifications" ]]; then
       if ! displayGraphics "$workDir/notifications \"$1\" \"$2\" \"$icon\" \"$3\" \"$4\" \"$displayPriority\" > /dev/null 2>&1 &" "launch"; then
         echo "  Notification: $1, $2"
       fi
    else
      echo "  Notification: $1, $2"
    fi
  fi
}

checkProgVer() {
  latestProgVer=$(curl -k -s https://api.github.com/repos/dragon8oy/kernel-notify/releases/latest |   grep "tag_name" | cut -d v -f 2,3 | tr -d \",)
  if [ "${latestProgVer//.}" -ne "${version//.}" ]; then
    echo "" && echo "Program outdated, v$latestProgVer is available" 
    if [ "$autoupdate" -ne "0" ]; then
      echo "Auto-update is enabled, updating kernel-notify" && echo ""
      sleep 5
      "$workDir/actions" "--display"
      pkexec kernel-notify -au
    else
      sendNotification "Version v$latestProgVer is available" "Update with 'kernel-notify -u'" "program" "mute"
    fi
  fi
}

checkKernelVer() {
  latestVersionFull=$(getLatestKernelVersion)
  latestVersion=${latestVersionFull//.}
  currVersion="$1"
  checkKernelCount "silent"
  if [ "$KERNELS" != "" ] && [ "$latestVersion" -ne "${currVersion//.}" ] && echo "$KERNELS" |grep "$latestVersionFull" > /dev/null 2>&1; then
    echo "Latest kernel version installed, reboot to take effect"
  elif [ "$latestVersion" -ne "${currVersion//.}" ]; then
    if [ "$autoupdate" -ne "0" ]; then
      echo "" && echo "Auto-update is enabled, updating kernel"
      sleep 5
      "$workDir/actions" "--display"
      pkexec kernel-notify -aa
    else
      sendNotification "Kernel $latestVersionFull is available" "You are currently running Kernel $currVersionFull" "kernel" "mute"
    fi
  fi
}

main() {
  currVersion=$(uname -r | sed 's/-.*/ /g')
  echo -n "Checking latest version..."
  latestVersionFull=$(getLatestKernelVersion)
  if [[ "$latestVersionFull" == "x.x.x" ]]; then
    sleep 0.5; echo -ne " Error\n"; sleep 0.5
    sendNotification "Network error" "An error occured while checking latest version"
  else
    echo -ne " Done\n"
  fi
  currVersionFull=$currVersion

  if [[ "$latestVersionFull" == "x.x.x" ]] || [[ "$latestVersionFull" == "" ]]; then
    exit 1
  fi
  latestVersion="${latestVersionFull//.}"

  if [ $(awk -F"." '{print NF-1}' <<< "${latestVersionFull}") -ne "2" ]; then
    latestVersion="${latestVersion}0"
    latestVersionFull="${latestVersionFull}.0"
  fi

  echo "Latest Kernel: $latestVersionFull"
  echo "Current Kernel: $currVersionFull"

  #Check if versions are outdated and notify
  checkProgVer
  checkKernelVer "$currVersion"

  #Check installed kernel count is below configured warning threshold
  checkKernelCount "alert"
}

read -ra args <<< $@
while [[ "$#" -gt 0 ]]; do case $1 in
  -h|--help) echo "Kernel-notify Copyright (C) 2020 Stuart Hayhurst"; echo "This program comes with ABSOLUTELY NO WARRANTY."; echo "This is free software; see the source for copying conditions."; echo ""; echo "Usage: kernel-notify [-OPTION] [-t | --test]"; echo "Program Help:"; echo "-h  | --help       : Display this page and exit"; echo "-u  | --update     : Update the program and exit"; echo "-v  | --version    : Display program version and exit"; echo "-o  | --old-config : List old and new config values"; echo "-c  | --config     : Change / read a config value and exit"; echo "                     - kernel-notify --config CFGOPTION NEWCFGVALUE"; echo ""; echo "Feature Help:"; echo "-r  | --remove-kernel : Remove kernels with a menu and exit"; echo "-l  | --list-kernels  : List installed kernels and exit"; echo "-a  | --add-kernel    : Install a new kernel and exit"; echo "-um | --unmute        : Unmute the program on login"; echo "-m  | --mute          : Mute the program on login"; echo ""; echo "GitHub Link: https://github.com/Dragon8oy/kernel-notify"; echo "Issues: https://github.com/Dragon8oy/kernel-notify/issues"; echo "Program written by: Dragon8oy (Stuart Hayhurst)"; exit;;
  -u|--update) updateProgram; exit;;
  -v|--version) echo "Kernel-notify version: $version"; echo ""; echo "GitHub Link: https://github.com/Dragon8oy/kernel-notify"; echo "Program written by: Dragon8oy (Stuart Hayhurst)"; exit;;
  -o|--old-config) listConfig; exit;;
  -c|--config) editConfig "$1" "$2" "$3"; exit;;
  -r|--remove-kernel|--remove-kernels) "$workDir/actions" -r "${args[@]:1}"; exit;;
  -l|--list|--list-kernels) "$workDir/actions" -l ""; checkKernelCount; exit;;
  -a|--add-kernel) updateKernel "" "$2"; exit;;
  -um|--unmute) unmute; exit;;
  -m|--mute) mute; exit;;
  -t|--test) ;; #Check for argument to prevent program interpreting it as unrecognised
  -am) automaticFeatures "am"; exit;;
  -aa) automaticFeatures "aa"; exit;;
  -au) automaticFeatures "au"; exit;;
  -zw) zenityNotify; main; exit;;
  "") main;;
  *) echo "Unknown argument passed: $1"; $( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/kernel-notify --help; exit 1;;
esac; shift; done

main
