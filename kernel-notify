#!/bin/bash
workDir="/usr/share/kernel-notify"
iconPath="/usr/share/kernel-notify/icon.png"
version="4.9"
silent="0"

source $workDir/config
cd $workDir

uninstall() {
PS3='Make your choice: '
options=("Yes" "No")
  select opt in "${options[@]}"
  do
      case $opt in
          "Yes")
              echo "Uninstalling:"
              sudo rm /etc/xdg/autostart/kernel-notify.desktop
              sudo rm /usr/bin/kernel-notify
              sudo rm -rf /usr/share/kernel-notify
              echo "Done"
              break
              ;;
          "No")
              exit
              ;;
          *) echo "invalid option $REPLY";;
      esac
  done
}

listConfig() {
  if [ -f /usr/share/kernel-notify/config.old ]; then
    if ! cmp --silent /usr/share/kernel-notify/config /usr/share/kernel-notify/config.old; then
      echo "Config file has changed"
      echo "Apply any config values you wish to keep with 'kernel-notify -c CFGNAME CFGVALUE'"
      echo ""
      echo "Old values:"
      cat /usr/share/kernel-notify/config.old
      echo "" && echo ""
      echo "New values:"
      cat /usr/share/kernel-notify/config
      echo "" && echo ""
    else
      echo "No change in config found"
    fi
  else
    echo "No old config file found"
  fi
}

editConfig() {
  echo "Running config:" && echo ""
  if [ "$2" == "" ]; then
    cat $workDir/config
  else
    if [ "$3" == "" ]; then
      cat $workDir/config | grep $2
    else
      sudo sed 's|.*'$2'.*|'$2'='\"$3\"'|' $workDir/config > $workDir/config.temp
      sudo mv $workDir/config.temp $workDir/config
      kernel-notify -s
    fi
  fi
}

mute() {
  echo "Muting Kernel-notify:"
  sudo rm /etc/xdg/autostart/kernel-notify.desktop
  echo "Done";
}

unmute() {
  echo "Unmuting kernel-notify:"
  sudo cp kernel-notify.desktop /etc/xdg/autostart/kernel-notify.desktop
  echo "Done";
}

latestVersion=$(echo $(curl https://www.kernel.org -s) | tr -d '\n' | awk -F'<td id="latest_button">' '{print $2}' | cut -c -70 | tr -d '\n' | awk -F'/' '{print $8}' | cut -c -70 | sed 's/linux-//g' | sed 's/.t.*//g')

if [ "$1" == "-c" ] || [ "$1" == "--config" ]; then
  editConfig
else
  while [[ "$#" -gt 0 ]]; do case $1 in
    -h|--help) echo "Program Help:"; echo "-h  | --help       : Display this page and exit"; echo "-u  | --update     : Update the program and exit"; echo "-v  | --version    : Display program version and exit"; echo "-i  | --uninstall  : Uninstall the program"; echo "-o  | --old-config : List old and new config values"; echo "-c  | --config     : Change / read a config value"; echo ""; echo "Feature Help:"; echo "-r  | --remove-kernel : Remove a kernels from a menu and exit"; echo "-l  | --list-kernels  : List installed kernels and exit"; echo "-a  | --add-kernel    : Install a new kernel and exit"; echo "-um | --unmute        : Unmute the program on login"; echo "-m  | --mute          : Mute the program on login"; echo ""; echo "Program written by: Dragon8oy"; exit;;
    -u|--update) $workDir/updater; exit;;
    -v|--version) echo "Kernel-notify version: $version"; echo ""; echo "Program written by: Dragon8oy"; exit;;
    -i|--uninstall) echo "Are you sure you want to uninstall?"; echo "Use 'apt-get remove kernel-notify' for .deb installs"; uninstall; exit;;
    -o|--old-config) listConfig; exit;;
    -r|--remove-kernel) ./actions -r $latestVersion; exit;;
    -l|--list-kernels) /home/ratus5/Downloads/Projects/kernel-notify/actions -l $latestVersion; exit;;
    -a|--add-kernel) ./actions -i $latestVersion; exit;;
    -um|--unmute) unmute; exit;;
    -m|--mute) mute; exit;;
    *) echo "Unknown parameter passed: $1"; kernel-notify --help; exit 1;;
  esac; shift; done
fi


currVersion=$(uname -r | sed 's/-.*/ /g')
latestVersionFull=$latestVersion
currVersionFull=$currVersion

echo 'Latest Kernel: '$latestVersionFull
echo 'Current Kernel: '$currVersionFull

latestVersion=$(echo "${latestVersion//.}")

if [ "$latestVersion" -le "99" ]; then
  latestVersion=$(echo "$latestVersion""0")
fi

if [ "$latestVersion" -ne "${currVersion//.}" ]; then
  if which notify-send > /dev/null 2>&1; then
    notify-send -u normal -i $iconPath \
"Kernel $latestVersionFull is available" \
"You are currently running Kernel $currVersionFull"
  fi
fi

latestProgVer=$(curl -s https://api.github.com/repos/dragon8oy/kernel-notify/releases/latest | grep "tag_name" | cut -d v -f 2,3 | tr -d \",)
if [ "${latestProgVer//.}" -ne "${version//.}" ]; then
  echo "Program outdated, v$latestProgVer is available" 
  if which notify-send > /dev/null 2>&1; then
    notify-send -u normal -i $iconPath \
"Version v$latestProgVer is available" \
"Update with 'kernel-notify -u'"
  fi
fi

