#!/bin/bash
workDir="/usr/share/kernel-notify"
iconPath="$workDir/icon.png"
version="5.5.1"
test="0"

testMode() {
  workDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
  echo "Running kernel-notify in $workDir/"
  test="1"
}
case "$1" in
  "-t") testMode;;
  "--test") testMode;;
esac
case "$2" in
  "-t") testMode;;
  "--test") testMode;;
esac

editConfig() {
  if [ "$2" == "" ]; then
    echo "Config:" && echo ""
    cat $workDir/config
  else
    if [ "$3" == "" ]; then
      echo "Config:" && echo ""
      cat $workDir/config | grep $2
    else
      sudo sed 's|.*'$2'.*|'$2'='\"$3\"'|' $workDir/config > $workDir/config.temp
      sudo mv $workDir/config.temp $workDir/config
      echo "Saved new config"
    fi
  fi
  exit
}

source $workDir/config
cd $workDir

if [ "$test" == "0" ] && [ ! -d /etc/xdg/autostart/ ]; then
    echo "Autostart directory not found, program will not automatically start"
fi

checkDpkg() {
  i=0
  tput sc
  echo "Checking dpkg lock..."
  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
    case $(($i % 4)) in
      0 ) j="-" ;;
      1 ) j="\\" ;;
      2 ) j="|" ;;
      3 ) j="/" ;;
    esac
    tput rc
    echo -en "\r[$j] Waiting for other software managers to finish... "
    sleep 1
    ((i=i+1))
  done
  echo "Done"
}

uninstall() {
  if [ "$test" == "1" ]; then
    echo "Uninstalling not supported in test mode"
    exit
  fi
  read -r -p "Are you sure? [y/N] " response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    echo "Uninstalling:"
    if dpkg -s kernel-notify | grep Status |grep -q installed; then
      checkDpkg
      cd /; sudo dpkg -r kernel-notify
      exit
    else
      if [ -f /etc/xdg/autostart/kernel-notify.desktop ]; then
        sudo rm /etc/xdg/autostart/kernel-notify.desktop
      fi
      if [ -f /usr/share/applications/kernel-notify.desktop ]; then
        sudo rm /usr/share/applications/kernel-notify.desktop
      fi
      sudo rm /usr/bin/kernel-notify
      sudo rm -rf /usr/share/kernel-notify
      echo "Done"
      exit
    fi
  fi
}

listConfig() {
  if [ -f /usr/share/kernel-notify/config.old ]; then
    if ! cmp --silent /usr/share/kernel-notify/config /usr/share/kernel-notify/config.old; then
      echo "Config file has changed"
      echo "Apply any config values you wish to keep with 'kernel-notify -c CFGNAME CFGVALUE'"
      echo ""
      echo "Old values:"
      cat /usr/share/kernel-notify/config.old
      echo "" && echo ""
      echo "New values:"
      cat /usr/share/kernel-notify/config
      echo "" && echo ""
    else
      echo "No change in config found"
    fi
  else
    echo "No old config file found"
  fi
}

checkKernelCount() {
  KERNELS=$(ls /boot/ | grep vmlinuz)
  KERNELS=${KERNELS//vmlinuz-}
  KERNELS=${KERNELS//-generic}
  KERNELS=${KERNELS// /\n }
  read -ra ARR <<< $(echo $KERNELS)
  if [ "${#ARR[@]}" -gt "$maxkernelcount" ]; then
    sendNotification "Kernel install limit reached" "Remove extra kernels with 'kernel-notify -r'" ""
    echo "Too many kernels installed, remove kernels to avoid this message, or raise the limit in the config"
  fi
}

automaticFeatures() {
  case $1 in
    am) mute; sendNotification "Program muted" "Run 'kernel-notify -um' to unmute";;
    aa) $workDir/actions -i "$latestVersion" "" -a && checkKernelCount && sendNotification "Kernel updated" "Run 'kernel-notify -r' to remove old kernels";;
    au) $workDir/updater && sendNotification "Program updated" "Run 'kernel-notify -v' to check version";;
  esac
}

zenityNotify() {
  currVersion=$(uname -r | sed 's/-.*/ /g')
  latestProgVer=$(curl -k -s https://api.github.com/repos/dragon8oy/kernel-notify/releases/latest | grep "tag_name" | cut -d v -f 2,3 | tr -d \",)
  if [ "${latestProgVer//.}" -eq "${version//.}" ] && [ "${latestVersion//.}" -eq "${currVersion//.}" ]; then
  zenity --info \
    --window-icon="/usr/share/kernel-notify/icon.png" \
    --title="Kernel Updater" \
    --text="No updates available" \
    --width=200 \
    --height=50
  fi

}

mute() {
  echo "Muting kernel-notify:"
  editConfig "-c" "muted" "1"
  echo "Done";
}

unmute() {
  echo "Unmuting kernel-notify:"
  editConfig "-c" "muted" "0"
  echo "Done";
}

sendNotification() {
  if [ "$muted" == "1" ] && [ "$4" == "mute" ]; then
    echo "$1, $2"
  else
    display=$(ps -u $(id -u) -o pid= | \
      while read pid; do
        cat /proc/$pid/environ 2>/dev/null | tr '\0' '\n' | grep '^DISPLAY=:'
      done | grep -o ':[0-9]*' | sort -u)
    user=$(who | grep '('$display')' | awk '{print $1}' | head -n 1)
    if ! sudo -u $user DISPLAY=$display DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u $user)/bus $workDir/notifications "$1" "$2" "$iconPath" "$3" "$4" > /dev/null 2>&1 &
    then
      echo "$1, $2"
    fi
  fi
}

echo -n "Checking latest version..."
latestVersion=$(echo $(curl -k https://www.kernel.org -s) | tr -d '\n' | awk -F'<td id="latest_button">' '{print $2}' | cut -c -70 | tr -d '\n' | awk -F'/' '{print $8}' | cut -c -70 | sed 's/linux-//g' | sed 's/.t.*//g')
if [ "$latestVersion" == "" ]; then
  sleep 0.5; echo -ne "\rChecking latest version... Error\n"; sleep 0.5
  latestVersion="x.x.x"
  sendNotification "Network error" "An error occured while checking latest version"
  if [ "$1" == "-a" ] || [ "$1" == "--add-kernel" ] || [ "$1" == "-aa" ]; then
    echo "Likely a network issue, action cancelled"
    exit
  fi
else
  echo ""
fi

read -ra args <<< $@
if [ "$1" == "-c" ] || [ "$1" == "--config" ]; then
  editConfig "$1" "$2" "$3"
else
  while [[ "$#" -gt 0 ]]; do case $1 in
    -h|--help) echo "Kernel-notify Copyright (C) 2019 Stuart Hayhurst"; echo "This program comes with ABSOLUTELY NO WARRANTY."; echo "This is free software; see the source for copying conditions."; echo ""; echo "Usage: kernel-notify [-OPTION] [-OPTION]"; echo "Program Help:"; echo "-h  | --help       : Display this page and exit"; echo "-u  | --update     : Update the program and exit"; echo "-v  | --version    : Display program version and exit"; echo "-i  | --uninstall  : Uninstall the program"; echo "-o  | --old-config : List old and new config values"; echo "-c  | --config     : Change / read a config value and exit"; echo ""; echo "Feature Help:"; echo "-r  | --remove-kernel : Remove a kernels from a menu and exit"; echo "-l  | --list-kernels  : List installed kernels and exit"; echo "-a  | --add-kernel    : Install a new kernel and exit"; echo "-um | --unmute        : Unmute the program on login"; echo "-m  | --mute          : Mute the program on login"; echo ""; echo "GitHub Link: https://github.com/Dragon8oy/kernel-notify"; echo "Issues: https://github.com/Dragon8oy/kernel-notify/issues"; echo "Program written by: Dragon8oy (Stuart Hayhurst)"; exit;;
    -u|--update) $workDir/updater; exit;;
    -v|--version) echo "Kernel-notify version: $version"; echo ""; echo "GitHub Link: https://github.com/Dragon8oy/kernel-notify"; echo "Program written by: Dragon8oy (Stuart Hayhurst)"; exit;;
    -i|--uninstall) uninstall; exit;;
    -o|--old-config) listConfig; exit;;
    -r|--remove-kernel) ./actions -r $latestVersion $maxkernelcount "${args[@]:1}"; exit;;
    -l|--list-kernels) ./actions -l $latestVersion $maxkernelcount; exit;;
    -a|--add-kernel) ./actions -i $latestVersion $2; checkKernelCount; exit;;
    -um|--unmute) unmute; exit;;
    -m|--mute) mute; exit;;
    -t|--test) ;;
    -am) automaticFeatures "am"; exit;;
    -aa) automaticFeatures "aa"; exit;;
    -au) automaticFeatures "au"; exit;;
    -zw) zenityNotify; exit;;
    *) echo "Unknown argument passed: $1"; $( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/kernel-notify --help; exit 1;;
  esac; shift; done
fi

currVersion=$(uname -r | sed 's/-.*/ /g')
latestVersionFull=$latestVersion
currVersionFull=$currVersion

echo 'Latest Kernel: '$latestVersionFull
echo 'Current Kernel: '$currVersionFull

if [ "$latestVersion" == "x.x.x" ]; then
  exit 1
fi
latestVersion=$(echo "${latestVersion//.}")

if [ "$latestVersion" -le "99" ]; then
  latestVersion=$(echo "$latestVersion""0")
fi

latestProgVer=$(curl -k -s https://api.github.com/repos/dragon8oy/kernel-notify/releases/latest | grep "tag_name" | cut -d v -f 2,3 | tr -d \",)
if [ "${latestProgVer//.}" -ne "${version//.}" ]; then
  echo "" && echo "Program outdated, v$latestProgVer is available" 
  if [ "$autoupdate" -ne "0" ]; then
    echo "Auto-update is enabled, updating kernel-notify" && echo ""
    sleep 5
    pkexec kernel-notify -au
  else
    sendNotification "Version v$latestProgVer is available" "Update with 'kernel-notify -u'" "program" "mute"
  fi
fi

if [ "$latestVersion" -ne "${currVersion//.}" ]; then
  if [ "$autoupdate" -ne "0" ]; then
    echo "" && echo "Auto-update is enabled, updating kernel"
    sleep 5
    pkexec kernel-notify -aa
  else
    sendNotification "Kernel $latestVersionFull is available" "You are currently running Kernel $currVersionFull" "kernel" "mute"
  fi
fi

checkKernelCount
