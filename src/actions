#!/bin/bash
# shellcheck disable=SC1090
# shellcheck disable=SC2154
installKernel() {
  if cat /etc/*-release |grep -q Raspbian 2>&1 ; then
    sendError "Raspbian / Raspberry Pis are not supported with this feature"
    exit 6
  fi
  if [[ "$(checkRoot "checksudo")" == "false" ]]; then
    checkRoot "root is required to install a kernel"
  fi
  if [[ "$automatic" -ne "1" ]]; then
    echo "Enter a kernel version to install, leave blank to use selected kernel ($installVersion):"
    read -r chosenVersion
  fi

  if [[ "$chosenVersion" == "" ]]; then
    if [[ "$(checkValidKernel "$installVersion")" == "invalid" ]]; then
      sendError "Selected kernel '$installVersion' is invalid" 1>&2
      exit 7
    fi
    echo "Using selected version $installVersion"
    chosenVersion="$installVersion"
    if [[ "$installVersion" != "x.x.x" ]]; then
      if [[ "${installVersion//.}" -eq "${currVersion//.}" ]]; then
        echo "Kernel is already on the selected version"
        exit 3
      fi
    else
      exit 7
    fi
  else
    if [[ "$(checkValidKernel "$chosenVersion")" == "invalid" ]]; then
      sendError "Selected kernel '$chosenVersion' is invalid" 1>&2
      exit 7
    fi
    echo "Finding kernel version $chosenVersion..."
  fi

  installVersion="$chosenVersion"
  mainlineRepoDir="https://kernel.ubuntu.com/~kernel-ppa/mainline/v$installVersion"

  if [[ "$(echo "$installVersion" |tr -cd '.' |wc -c)" -ne "2" ]]; then
    installVersion="${installVersion}.0"
  fi

  arch="$(dpkg --print-architecture)"
  archiveContent="$(curl -k -s "$mainlineRepoDir/")"
  kernelDate="$(echo "$archiveContent" |grep "linux-headers-$installVersion-$(prepareVersion "$installVersion")_$installVersion-$(prepareVersion "$installVersion").")"

  if [[ "$kernelDate" == *"$arch"* ]]; then
    mainlineRepoDir="$mainlineRepoDir/$arch"
  fi

  kernelDate="${kernelDate%%_all*}"
  kernelDate="${kernelDate##*.}"

  if [[ "$kernelDate" == "" ]]; then
    sendError "Either kernel $installVersion doesn't have an entry, or you have no internet connection"
    exit 2
  fi

  kernelType="generic"
  fullVersionString="$installVersion-$(prepareVersion "$installVersion")-${kernelType}_$installVersion-$(prepareVersion "$installVersion").$kernelDate"
  packages=("$mainlineRepoDir/linux-headers-${fullVersionString//-$kernelType}_all.deb")
  packages+=("$mainlineRepoDir/linux-headers-${fullVersionString}_$arch.deb")
  packages+=("$mainlineRepoDir/linux-modules-${fullVersionString}_$arch.deb")
  packages+=("$mainlineRepoDir/linux-image-unsigned-${fullVersionString}_$arch.deb")

  dpkgKernelInstall() {
    echo "Downloading kernel version $installVersion..." 1>&2 && echo "" 1>&2
    if [[ ! -d "/tmp/kernel-notify" ]]; then
      mkdir /tmp/kernel-notify
    elif [[ ! -w /tmp/kernel-notify ]]; then
      sendError "No permission to use /tmp/kernel-notify, please delete it and try again or run with root"
      sendNotification "Kernel failed to update" "Kernel failed to update for an unknown reason"
      exit 7
    fi
    cd /tmp/kernel-notify || exit 7

    for filename in "${packages[@]}"; do
      progress=$((( "$progress"+10 )))
      echo "# Downloading ${filename##*/}..."
      curl --progress-bar -O "$filename"
      echo "$progress"
      filename="${filename##*/}"
      installList="$installList $filename"
      if ! file "$filename" | grep -q 'Debian binary package'; then
        sendError "$filename: Not a Debian package"
        clearFiles "$installList"
        sendNotification "Kernel failed to update" "Downloaded kernel faulty"
        exit 4
      fi
    done

    echo "# Downloading & verifying checksums..."
    curl --progress-bar -O "$mainlineRepoDir/CHECKSUMS"
    echo "45"
    if ! sha256sum --ignore-missing -c CHECKSUMS 1>&2; then
      sendError "Downloaded kernel checksum invalid"
      clearFiles "$installList CHECKSUMS"
      sendNotification "Kernel failed to update" "Downloaded kernel faulty"
      exit 4
    fi
    echo "50"

    echo "" 1>&2; echo "All packages verified, installing kernel version $installVersion..." 1>&2
    if [[ "$(checkRoot "silent")" == "true" ]]; then
      checkDpkg 1>&2
    else
      sudo bash -c "source $workDir/config && source $workDir/functions && checkDpkg" 1>&2
    fi

    #Read kernels into an array and install
    read -ra installArray <<< "$installList"
    echo "# Installing kernel $installVersion..."
    if [[ "$(checkRoot "silent")" == "true" ]]; then
      dpkg -i "${installArray[@]}" 1>&2
    else
      sudo dpkg -i "${installArray[@]}" 1>&2
    fi
    echo "# Installed Kernel v$installVersion"
    echo "100"
    echo "Done, reboot for the update to take effect" 1>&2
    clearFiles "$installList CHECKSUMS"
  }

  if ! displayGraphics "zenity"; then
    dpkgKernelInstall
  else
    dpkgKernelInstall | displayGraphics 'zenity --progress --auto-close --no-cancel --window-icon="/usr/share/icons/hicolor/64x64/apps/kernel-notify.png" --title="Kernel Updater" --text="Starting update..." --width=400 --height=100 --percentage=0' "launch" "zenity"
  fi

  if [[ "$?" == "1" ]]; then
    echo "Cancelled"
    for filename in "${packages[@]}"; do
      filename="${filename##*/}"
      installList="$installList $filename"
    done
    clearFiles "$installList CHECKSUMS"
    exit 5
  fi
}

removeKernel() {
  if [[ "$(checkRoot "checksudo")" == "false" ]]; then
    checkRoot "root is required to remove kernels"
  fi
  args="$*"
  read -ra kernelList <<< "$(getKernelList)"
  if [[ "$args" != "" ]]; then
    DELVERSION="$args"
  else
    displayKernels "minimal"
    if [[ "$?" == "1" ]]; then
      exit
    fi
    echo "Please enter the kernels or numbers you want to remove: (x.x.x-xXxXxX): "
    read -r DELVERSION
  fi
  DELVERSION=${DELVERSION//,/ }
  read -ra ARR <<< "$DELVERSION"
  if [[ "${ARR[*]}" == "0" ]] || [[ "${ARR[*]}" == "" ]]; then
    sendError "Either no kernel was entered, or an error occured"
    exit
  fi
  for i in "${ARR[@]}"; do
    if [[ "${#i}" == 1 ]] || [[ "${#i}" == 2 ]]; then
      if [[ "$i" =~ ^([1-9][0-9]|[1-9])+$ ]]; then
        i="${kernelList[$(((i-1)))]}" #Replace i with the kernel in that position
      fi
    fi
    if [[ ! "${#i}" == 12 ]] && [[ ! "${#i}" == 13 ]] && [[ ! "${#i}" == 14 ]]; then
      sendError "'$i' is not in the correct format"
      exit
    fi
    if [[ "$i" == "$(uname -r | sed 's/-generic//g')" ]]; then
      sendError "Removing the booted kernel is not allowed"
      exit
    fi
    REMOVEVERS+=("$i")
    DELSTR="$DELSTR $i"
    REMOVESTR+=("linux-headers-$i" "linux-headers-$i-generic" "linux-modules-$i-generic" "linux-image-unsigned-$i-generic")
  done
  read -r -p "Are you sure you want to remove kernel(s):$DELSTR? [y/N] " response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    if [[ "$(checkRoot "silent")" == "true" ]]; then
      checkDpkg
      dpkg -P "${REMOVESTR[@]}"
      #Remove left over kernel module directory is config is enabled
      if [[ "$kernelcleanup" == "true" ]]; then
        REMOVESTR=("")
        for kernelVer in "${REMOVEVERS[@]}"; do
          for kernelDir in "/lib/modules/$kernelVer"*; do
            REMOVESTR+=("$kernelDir")
          done
        done
        if sudo rm -rf "${REMOVESTR[@]}"; then
          echo "Successfully cleaned up kernel module directories"
        else
          sendError "Failed to clean up kernel module directories"
        fi
      fi
    else
      sendError "  ATTENTION: Insufficient permission, root is required to remove kernels"; exit 1
    fi
  fi
}

clearFiles() {
  cd /tmp/kernel-notify || exit 7
  read -ra ARR <<< "$@"
  for i in "${ARR[@]}"; do
    if [[ -f "$i" ]]; then
      rm "$i"
    else
      sendError "File $i doesn't exist, not deleting"
    fi
  done
  if [[ "$(ls /tmp/kernel-notify)" == "" ]]; then
    if [[ ! -w /tmp/kernel-notify ]]; then
      sendError "Insufficient permission to remove /tmp/kernel-notify"
    else
      rm -rf /tmp/kernel-notify
    fi
  fi
  cd ../
}

mkDisplayInfo() {
  echo "display=$DISPLAY" > /tmp/kernel-notify.displayinfo
  echo "user=$USER" >> /tmp/kernel-notify.displayinfo
}

if [[ -d "$workDir" ]] && [[ -f "$workDir/config" ]] && [[ -f "$workDir/functions" ]]; then
  source "$workDir/config"
  source "$workDir/functions"
  cd "$workDir" || exit 7
else
  sendError "Config file / kernel-notify directory missing, exiting"
  exit 1
fi

if [[ "$1" != "-l" ]] && [[ "$1" != "--list" ]]; then
  if [[ ! -f "/usr/bin/dpkg" ]]; then
    sendError "Kernel installation / removal is not supported on this system"
    exit 6
  fi
fi

if [[ "$1" == "-i" ]] && [[ "$2" != "" ]]; then
  installVersion="$2"
  currVersion=$(uname -r | sed 's/-.*/ /g')
  automatic="1"
elif [[ "$1" == "-i" ]]; then
  installVersion=$(getLatestKernelVersion)
  currVersion=$(uname -r | sed 's/-.*/ /g')
fi

if [[ "$4" == "-a" ]]; then
  automatic="1"
elif [[ "$automatic" == "" ]]; then
  automatic="0"
fi

read -ra args <<< "$@"
case $1 in
    -r|--remove) removeKernel "${args[@]:1}"; exit;;
    -l|--list) displayKernels; exit 0;;
    -i|--install) installKernel; exit 0;;
    -d|--display) mkDisplayInfo; exit 0;;
    *) echo "Use -i, -r or -l"; exit 7;;
esac;
