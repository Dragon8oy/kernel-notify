#!/bin/bash
# shellcheck disable=SC1090
# shellcheck disable=SC2154
export workDir="/usr/share/kernel-notify"
version="6.1.4"

editConfig() {
  #Read arguments and input variables
  if [[ "$1" == *"="* ]]; then
    configName="${1%=*}"
    configValue="${1#*=}"
  else
    configName="$1"
    configValue="$2"
  fi

  if [ "$configName" == "" ]; then
    #Display config without #!/bin/bash
    echo "Config: $workDir/config"; echo ""; grep -v "#!/bin/bash" "$workDir/config" |grep -v "# shellcheck disable=SC2034"
  elif [ "$configValue" == "" ]; then
    #Search config for a specific config and output result
    if [[ "$3" != "silent" ]]; then
      echo "Config: $workDir/config"; echo ""
    fi
    grep "$configName" "$workDir/config"
  else
    #Search config for specific config, get the value and replace with new value
    currentConfigString="$(grep "$configName=" "$workDir/config" |grep -v "#")"
    #currentConfigString="$(cat "$workDir/config" |grep "$configName=" |grep -v "#")"
    if [[ "$currentConfigString" != "" ]]; then
      checkRoot "root is required to edit the config"
      sed "s|.*$currentConfigString.*|$configName=\"$configValue\"|" "$workDir/config" > /tmp/kernel-config.temp
      if [[ "$(cat /tmp/kernel-config.temp)" != "" ]]; then
        mv /tmp/kernel-config.temp "$workDir/config"
      else
        rm /tmp/kernel-config.temp
      fi
    else
      echo "Invalid config name"
    fi
    #Check new config value was saved correctly
    if [[ "$(editConfig "$configName" "" "silent")" == "$configName=\"$configValue\"" ]] && [[ "$3" != "silent" ]]; then
      echo "Saved new config"
    elif [[ "$3" != "silent" ]]; then
      echo "Failed to save new config"
    fi
  fi
}

listConfig() {
  if [ -f "$workDir/config.old" ]; then
    if ! cmp --silent "$workDir/config" "$workDir/config.old"; then
      echo "Config file has changed"
      echo "Apply old values to new config with 'kernel-notify -c CFGNAME CFGVALUE'"; echo ""
      echo "Old values:"
      cat "$workDir/config.old"; echo ""; echo ""
      echo "New values:"
      cat "$workDir/config"
    else
      echo "No change in config found"
    fi
  else
    echo "No old config file found"
  fi
}

mute() {
  #Disable autostart
  checkRoot "root is required to mute kernel-notify"
  echo -n "Disabling kernel-notify autostart... "
  autostartFile="/etc/xdg/autostart/kernel-notify.desktop"
  #Remove .desktop file from /etc/xdg/autostart
  if [[ -f "$autostartFile" ]]; then
    rm "$autostartFile"
  fi
  #Test that the file was removed
  if [[ ! -f "$autostartFile" ]]; then
    echo "done"
  else
    echo "failed"
  fi
}

unmute() {
  #Enable autostart
  checkRoot "root is required to unmute kernel-notify"
  echo -n "Enabling kernel-notify autostart... "
  #Copy .desktop file into /etc/xdg/autostart
  autostartFile="/etc/xdg/autostart/kernel-notify.desktop"
  if [[ ! -f "$autostartFile" ]]; then
    cp "/usr/share/kernel-notify/kernel-notify.desktop" "$autostartFile"
  fi
  #Test that the file is present
  if [[ -f "$autostartFile" ]]; then
    echo "done"
  else
    echo "failed"
  fi
}

checkKernelCount() {
  if [[ "$1" != "silent" ]] && [[ "$1" != "alert" ]]; then
    if cat /etc/*-release |grep -q Raspbian 2>&1 ; then
      return 1
    fi
  fi
  if [[ ! -d "/boot" ]]; then
    return
  fi
  KERNELS="$(ls /boot/vmlinuz-*)"
  KERNELS="${KERNELS//'/boot/'}"
  KERNELS="${KERNELS//vmlinuz-}"
  KERNELS="${KERNELS//-generic}"
  KERNELS="$(echo "$KERNELS" |sort -V)"
  read -ra ARR <<< "${KERNELS//$'\n'/ }"
  if [[ "$1" != "silent" ]]; then
    if [[ "${#ARR[@]}" > "$maxkernelcount" ]]; then
      sendNotification "Configured kernel install count reached" "Remove extra kernels with 'kernel-notify -r'" ""
      echo "Remove kernels to avoid this message, or raise the limit in the config"
    fi
  fi
}

listAvailableKernels() {
  kernelList=()
  while read -r line; do
    kernelList+=("$line")
  done <<< "$(git ls-remote --refs --tags --sort="v:refname" "$minorversionrepo" |grep -v "[0-9]-rc")"
  for line in "${kernelList[@]}"; do
    echo "${line##*v}"
  done |less +G
}

automaticFeatures() {
  case $1 in
    am) mute; sendNotification "Program muted" "Run 'kernel-notify -U' to unmute";;
    aa) updateKernel "automatic" "";;
    au) updateProgram "$version" "automatic";;
  esac

  if [[ -f "/tmp/kernel-notify.displayinfo" ]]; then
    rm /tmp/kernel-notify.displayinfo
  fi
}

zenityNotify() {
  latestVersion=$(getLatestKernelVersion)
  currVersion=$(uname -r | sed 's/-.*/ /g')
  latestProgVer=$(curl -k -s https://api.github.com/repos/dragon8oy/kernel-notify/releases/latest | grep "tag_name" | cut -d v -f 2,3 | tr -d \",)
  latestVersionFull=$latestVersion
  latestVersion="${latestVersion//.}"
  checkKernelCount "silent"
  if [ "$latestVersion" != "xxx" ] || [ "$latestProgVer" != "" ]; then
    if [ "$KERNELS" != "" ] && [ "$latestVersion" -ne "${currVersion//.}" ] && echo "$KERNELS" |grep "$latestVersionFull" > /dev/null 2>&1; then
      echo "Latest kernel version installed, reboot to take effect"
      kernelOutdated="0"
    elif [ "$latestVersion" -ne "${currVersion//.}" ]; then
      echo "Latest kernel not installed"
      kernelOutdated="1"
    else
      echo "Latest kernel version installed"
      kernelOutdated="0"
    fi
    if [ "${latestProgVer//.}" -ne "${version//.}" ]; then
      echo "Program outdated"
      progOutdated="1"
    else
      echo "Program up-to-date"
      progOutdated="0"
    fi
  else
    progOutdated="0"
    kernelOutdated="0"
    sendNotification "Network error" "An error occured while checking latest version"
  fi
  if [ "$progOutdated" == "0" ] && [ "$kernelOutdated" == "0" ]; then
    if ! displayGraphics 'zenity --info --window-icon=/usr/share/icons/hicolor/64x64/apps/kernel-notify-app.png --icon-name=kernel-notify-app --title="Kernel Updater" --text="No updates available" --width=200 --height=50' "launch" "zenity"; then
    #if [ "$?" != "0" ]; then
      sendNotification "Zenity issue detected" "An error occured while running zenity"
    fi
    exit
  fi
  latestVersion="$latestVersionFull"
}

updateProgram() {
  checkRoot "root is required to update kernel-notify"
  if bash -e "$workDir/updater" "$version"; then
    #Program updated fine
    if [[ "$2" == "automatic" ]]; then
      sendNotification "Program updated" "Run 'kernel-notify -v' to check version"
    fi
  elif [[ "$?" == "1" ]]; then
    #Program has no updates available
    return
  else
    #Program failed to update
    echo "  ATTENTION: Updating kernel-notify failed"
    if [[ "$2" == "automatic" ]]; then
      sendNotification "Program update failed" "Kernel-notify failed to update - run 'kernel-notify -u'"
    fi
  fi
}

updateKernel() {
  latestVersionFull=$(getLatestKernelVersion)
  if [[ "$latestVersionFull" == "x.x.x" ]]; then
    sendNotification "Network error" "An error occured while checking latest version"
    echo "Likely a network issue, installation cancelled"
    exit
  fi
  if [[ "$1" == "automatic" ]]; then
    "$workDir/actions" -i "$latestVersionFull" -a
    case "$?" in
      #Kernel install successful
      0) sendNotification "Kernel updated" "Run 'kernel-notify -r' to remove old kernels";;
      #Kernel install failed - missing resources
      1) sendNotification "Kernel failed to update" "Shared functions could not be found";;
      #Kernel install failed - no kernel to download / network error
      2) sendNotification "Kernel failed to update" "No kernel to download / network error";;
      #Kernel install failed - already updated
      3) sendNotification "Kernel failed to update" "Installed kernel is already the latest version";;
      #Kernel install failed - broken packages
      4) sendNotification "Kernel failed to update" "Downloaded kernel faulty";;
      #Kernel install failed - user cancelled
      5) sendNotification "Kernel failed to update" "Cancelled by user";;
      #Kernel install failed - unsupported
      6) sendNotification "Kernel failed to update" "Updating the kernel is unsupported on this system";;
      #Kernel install failed - unknown error
      7|*) sendNotification "Kernel failed to update" "Kernel failed to update for an unknown reason";;
    esac
  else
    "$workDir/actions" -i "$2"
  fi
  checkKernelCount
}

checkProgVer() {
  latestProgVer=$(curl -k -s https://api.github.com/repos/dragon8oy/kernel-notify/releases/latest |   grep "tag_name" | cut -d v -f 2,3 | tr -d \",)
  if [ "${latestProgVer//.}" -ne "${version//.}" ]; then
    echo "" && echo "Program outdated, v$latestProgVer is available" 
    if [[ "$autoupdate" == "true" ]]; then
      echo "Auto-update is enabled, updating kernel-notify" && echo ""
      sleep 5
      "$workDir/actions" "--display"
      pkexec kernel-notify -au
    else
      sendNotification "Version v$latestProgVer is available" "Update with 'kernel-notify -u'" "program" "mute"
    fi
  fi
}

checkKernelVer() {
  currVersion="$1"
  latestVersionFull="$2"
  checkKernelCount "silent"
  if [ "$KERNELS" != "" ] && [[ "$(prepareVersion "$latestVersionFull")" > "$(prepareVersion "$currVersion")" ]] && echo "$KERNELS" |grep "$latestVersionFull" > /dev/null 2>&1; then
    echo "Latest kernel version installed, reboot to take effect"
  elif [[ "$(prepareVersion "$latestVersionFull")" > "$(prepareVersion "$currVersion")" ]]; then
    if [[ "$autoupdate" == "true" ]]; then
      echo "" && echo "Auto-update is enabled, updating kernel"
      sleep 5
      "$workDir/actions" "--display"
      pkexec kernel-notify -aa
    else
      sendNotification "Kernel $latestVersionFull is available" "You are currently running Kernel $currVersion" "kernel" "mute"
    fi
  fi
}

main() {
  currVersion=$(uname -r | sed 's/-.*/ /g')
  echo -n "Checking latest version..."
  latestVersionFull=$(getLatestKernelVersion)

  if [[ "$latestVersionFull" == "x.x.x" ]]; then
    sleep 0.5; echo -ne " Error\n"; sleep 0.5
    sendNotification "Network error" "An error occured while checking latest version"
  else
    echo -ne " Done\n"
  fi

  if [[ "$latestVersionFull" == "x.x.x" ]] || [[ "$latestVersionFull" == "" ]]; then
    exit 1
  fi

  if [[ "$(echo "$latestVersionFull" |tr -cd '.' |wc -c)" != "2" ]]; then
    latestVersionFull="${latestVersionFull}.0"
  fi

  echo "Latest Kernel: $latestVersionFull"
  echo "Current Kernel: $currVersion"

  #Check if versions are outdated and notify
  checkProgVer
  checkKernelVer "$currVersion" "$latestVersionFull"

  #Check installed kernel count is below configured warning threshold
  checkKernelCount "alert"
}

#Expand combined arguments
read -ra args <<< "$@"; argNum="0"
while [[ "$#" > "$argNum" ]]; do
  arg="${args[argNum]}"
  if [[ "$arg" = --* ]]; then
    #If the argument has 2 dashes, don't modify it
    expandedArgs+=("$arg")
  elif [[ "$arg" = -* ]]; then
    #If the argument is internal, set it to be skipped
    for i in -aa -au -am -zw; do
      if [[ "$arg" == "$i" ]]; then
        skipArg="true"
        break
      fi
    done
    if [[ "$skipArg" == "true" ]]; then
      #Skip argument if set
      expandedArgs+=("$arg")
    else
      #Split the argument into individual letters and add to arguments array
      for splitArg in $(echo "${arg//-}" |grep -o .); do
        expandedArgs+=("-$splitArg")
      done
    fi
    skipArg="false"
  else
    #If the argument has no dashes, don't modify it
    expandedArgs+=("$arg")
  fi
  argNum=$((argNum + 1))
done

#Set variables needed for given arguments
argNum="0"
while [[ "${#expandedArgs[@]}" > "$argNum" ]]; do
  arg="${expandedArgs[argNum]}"
  case $arg in
    -xxxxxxx|--argumentstring) echo "Placeholder";;
  esac
  argNum=$((argNum + 1))
done

#Remove processed arguments from the array
for i in "${expandedArgs[@]}"; do
  if [[ "$i" != "" ]]; then
    new_array+=( "$i" )
  fi
done
expandedArgs=("${new_array[@]}")
unset args skipArg new_array

#Source / check existing program files
if [[ -d "$workDir" ]] && [[ -f "$workDir/config" ]] && [[ -f "$workDir/functions" ]]; then
  source "$workDir/config"
  source "$workDir/functions"
  cd "$workDir" || exit 1
else
  echo "Config file / kernel-notify directory missing, exiting"
  exit 1
fi

if [ "$test" == "" ] && [ ! -d "/etc/xdg/autostart/" ] && [[ "$warnautostart" == "true" ]]; then
    echo "Autostart directory not found, program will not automatically start"
fi

#Run given arguments
argNum="0"
while [[ "${#expandedArgs[@]}" > "$argNum" ]]; do
  arg="${expandedArgs[argNum]}"
  case $arg in
    -h|--help) echo "Kernel-notify Copyright (C) 2020 Stuart Hayhurst"; \
    echo "This program comes with ABSOLUTELY NO WARRANTY."; \
    echo "This is free software; see the source for copying conditions."; \
    echo ""; \
    echo "Usage: kernel-notify [-OPTIONS]"; \
    echo "Program Help:"; \
    echo "-h  | --help       : Display this page and exit"; \
    echo "-u  | --update     : Update the program and exit"; \
    echo "-v  | --version    : Display program version and exit"; \
    echo "-o  | --old-config : List old and new config values"; \
    echo "-c  | --config     : Change / read a config value and exit"; \
    echo ":                    - kernel-notify --config configName configValue"; \
    echo ""; \
    echo "Feature Help:"; \
    echo "-L  | --list-available : List all kernels available to install"; \
    echo "-r  | --remove-kernel  : Remove kernels with a menu and exit"; \
    echo "-l  | --list-kernels   : List installed kernels and exit"; \
    echo "-a  | --add-kernel     : Install a new kernel and exit"; \
    echo "-U  | --unmute         : Enable kernel-notify autostart"; \
    echo "-m  | --mute           : Disable kernel-notify autostart"; \
    echo ""; \
    echo "GitHub Link: https://github.com/Dragon8oy/kernel-notify"; \
    echo "Issues: https://github.com/Dragon8oy/kernel-notify/issues"; \
    echo "Program written by: Dragon8oy (Stuart Hayhurst)"; exit;;
    -u|--update) updateProgram; exit;;
    -v|--version) echo "Kernel-notify version: $version"; echo ""; echo "GitHub Link: https://github.com/Dragon8oy/kernel-notify"; echo "Program written by: Dragon8oy (Stuart Hayhurst)"; exit;;
    -o|--old-config) listConfig; exit;;
    -c|--config) editConfig "${expandedArgs[((argNum + 1))]}" "${expandedArgs[((argNum + 2))]}" "${expandedArgs[((argNum + 3))]}"; exit;;
    -L|--list-available|--list-available-kernels) listAvailableKernels; exit;;
    -r|--remove-kernel|--remove-kernels) "$workDir/actions" -r "${expandedArgs[@]:1}"; exit;;
    -l|--list|--list-kernels) "$workDir/actions" -l ""; checkKernelCount; exit;;
    -a|--add-kernel) updateKernel "" "${expandedArgs[((argNum + 1))]}"; exit;;
    -U|--unmute) unmute; exit;;
    -m|--mute) mute; exit;;
    -am) automaticFeatures "am"; exit;;
    -aa) automaticFeatures "aa"; exit;;
    -au) automaticFeatures "au"; exit;;
    -zw) zenityNotify; main; exit;;
    *) echo "Unknown argument passed: $1"; "$(dirname "${BASH_SOURCE[0]}")/kernel-notify" --help; exit 1;;
  esac
  argNum=$((argNum + 1))
done

main
