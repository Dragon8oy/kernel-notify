#!/bin/bash
# shellcheck disable=SC2154
checkDpkg() {
  i=0
  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
    case $((i % 4)) in
      0 ) j="-" ;;
      1 ) j="\\" ;;
      2 ) j="|" ;;
      3 ) j="/" ;;
    esac
    echo -en "\r[$j] Waiting for other software managers to finish... "
    sleep 1
    ((i=i+1))
  done
  echo -en "Done\n"
}

displayGraphics() {
  #Get display and user information
  if [[ "$DISPLAY" != "" ]]; then
    display="$DISPLAY"
    user="$USER"
  elif [[ -f "/tmp/kernel-notify.displayinfo" ]]; then
    declare "$(grep "display.*" /tmp/kernel-notify.displayinfo)" #Declare display
    declare "$(grep -v "display.*" /tmp/kernel-notify.displayinfo)" #Declare user
  else
    #No display available
    return 1
  fi

  for i in "$@"; do
    #Check if zenity is installed
    if [[ "$i" == "zenity" ]]; then
      if ! which zenity > /dev/null 2>&1; then
        echo "Zenity not installed, it is required for graphical menus"
        return 1
      fi
    fi
    #Run command on correct display with correct user
    if [[ "$i" == "launch" ]]; then
      sudo -u "$user" DISPLAY="$display" DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/"$(id -u "$user")"/bus bash -c "$1"
    fi
  done
}

getLatestKernelVersion() {
  latestVersion="$(echo $(curl -k https://www.kernel.org -s) | tr -d '\n' | awk -F'<td id="latest_button">' '{print $2}' | cut -c -70 | tr -d '\n' | awk -F'/' '{print $8}' | cut -c -70 | sed 's/linux-//g' | sed 's/.t.*//g')"
  if [[ "$checkingprecision" == "minor" ]]; then
    kernelRepoUrl="$minorversionrepo"
  elif [[ "$checkingprecision" == "major" ]]; then
    if [ "$(awk -F"." '{print NF-1}' <<< "${latestVersion}")" == "2" ]; then
      latestVersion="${latestVersion%.*}"
    fi
    kernelRepoUrl="$majorversionrepo"
  fi
  if [ "$latestVersion" == "" ]; then
    latestVersion="$(git ls-remote --refs --tags --sort="v:refname" "$kernelRepoUrl" 2>/dev/null |grep -v "[0-9]-rc" |tail -n1)"
    latestVersion="${latestVersion##*v}"
    if [ "$latestVersion" == "" ]; then
      latestVersion="x.x.x"
    fi
  fi
  echo "$latestVersion"
}

prepareVersion() {
  version=""
  for i in ${1//./ }; do
    if [[ "$i" -lt "10" ]]; then
      version+="0$i"
    else
      version+="$i"
    fi
  done
  echo "$version"
}

sendNotification() {
  #Silence notification if program is muted
  if [ "$muted" == "1" ] && [ "$4" == "mute" ]; then
    echo "$1, $2"
  else
    #Decide whether or not to set configured priority
    if [ "$3" == "kernel" ] || [ "$3" == "program" ] || [ "$4" == "mute" ]; then
      displayPriority="$priority"
    fi
    #Check notifications code exists before running
    if [[ -f "$workDir/notifications" ]]; then
       if ! displayGraphics "$workDir/notifications \"$1\" \"$2\" \"kernel-notify\" \"$3\" \"$4\" \"$displayPriority\" > /dev/null 2>&1 &" "launch"; then
         echo "  Notification: $1, $2"
       fi
    else
      echo "  Notification: $1, $2"
    fi
  fi
}
